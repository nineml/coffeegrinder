<book xmlns="http://docbook.org/ns/docbook"
      xmlns:xi='http://www.w3.org/2001/XInclude'
      xmlns:xlink="http://www.w3.org/1999/xlink"
      version="5.2">
<info>
<mediaobject role="cover">
  <imageobject>
    <imagedata fileref="images/CoffeeGrinder.png"/>
  </imageobject>
</mediaobject>
<title>CoffeeGrinder</title>
<subtitle>An Earley parser in Java</subtitle>
<author>
  <personname>Norm Tovey-Walsh</personname>
</author>
<copyright><year>2022</year><holder>Norm Tovey-Walsh</holder></copyright>
<productname>coffeepot</productname>
<productnumber>@@VERSION@@</productnumber>
</info>

<preface>
<title>Introduction</title>

<para>This package provides an implementation of an
<link xlink:href="https://en.wikipedia.org/wiki/Earley_parser">Earley parser</link>. The
Earley parsing algorithm is able to use grammars that are ambiguous. This API
parses a sequence of tokens and returns a Shared Packed Parser Forest.
Individual parse trees can be obtained from the forest.</para>

</preface>

<chapter>
<title>General use</title>

<para>This is just an overview, consult the 
<link xlink:href="/apidoc">JavaDoc</link> for more details.</para>

<programlistingco>
<areaspec>
<area xml:id="ex_g" coords="1 55"/>
<area xml:id="ex_ntg" coords="3 55"/>
<area xml:id="ex_r1a" coords="9 35"/>
<area xml:id="ex_r1b" coords="10 35"/>
<area xml:id="ex_r2" coords="12 55"/>
<area xml:id="ex_term" coords="13 55"/>
<area xml:id="ex_close" coords="19 55"/>
<area xml:id="ex_hyg" coords="21 55"/>
<area xml:id="ex_parser" coords="27 55"/>
<area xml:id="ex_result" coords="29 55"/>
<area xml:id="ex_success" coords="31 55"/>
<area xml:id="ex_forest" coords="32 55"/>
<area xml:id="ex_tree" coords="33 55"/>
<area xml:id="ex_amb" coords="37 55"/>
</areaspec>
<programlisting language="java">Grammar grammar = new Grammar();

NonterminalSymbol S = grammar.getNonterminal("S");
NonterminalSymbol A = grammar.getNonterminal("A");
NonterminalSymbol B = grammar.getNonterminal("B");
NonterminalSymbol X = grammar.getNonterminal("X");
NonterminalSymbol Y = grammar.getNonterminal("Y");

Rule s1 = new Rule(S, A);
grammar.addRule(s1);

grammar.addRule(S, B);
grammar.addRule(A, TerminalSymbol.ch('a'), X);
grammar.addRule(A, TerminalSymbol.ch('b'), X);
grammar.addRule(B, TerminalSymbol.ch('b'), X);
grammar.addRule(X, TerminalSymbol.ch('x'));
grammar.addRule(Y, TerminalSymbol.ch('y'));

grammar.close();

HygieneReport report = grammar.checkHygiene(S);
if (!report.isClean()) {
    // TODO: deal with undefined,
    // unused, and unproductive items
}

EarleyParser parser = grammar.getParser(S);

EarleyResult result = parser.parse("bx");

if (result.succeeded()) {
    ParseForest forest = result.getForest();
    ParseTree tree = forest.parse();

    // TODO: do something with the tree.

    if (forest.isAmbiguous()) {
        long totalParses = forest.getTotalParses();
        // TODO: deal with multiple parses
    }
} else {
    // TODO: deal with failure
}</programlisting>
<calloutlist>
<callout arearefs="ex_g">
<para>Create a
<link xlink:href="/apidoc/org/nineml/coffeegrinder/parser/Grammar.html">Grammar</link>.
</para>
</callout>
<callout arearefs="ex_ntg">
<para>Use the grammar to create nonterminal symbols.
</para>
</callout>
<callout arearefs="ex_r1a">
<para>Create rules mapping each nonterminal symbol to zero or more other symbols.
</para>
</callout>
<callout arearefs="ex_r1b">
<para>Add the rules to the grammar.
</para>
</callout>
<callout arearefs="ex_r2">
<para>You can also just use the <methodname>addRule</methodname> method to add
the symbols and their mappings directly.
</para>
</callout>
<callout arearefs="ex_term">
<para>Several flavors of
<link xlink:href="/apidoc/org/nineml/coffeegrinder/parser/TerminalSymbol.html">TerminalSymbol</link>
are supported out-of-the-box and the set of
<link xlink:href="/apidoc/org/nineml/coffeegrinder/tokens/Token.html">Tokens</link>
is extensible.
</para>
</callout>
<callout arearefs="ex_close">
<para>Close the grammar when you’re finished adding to it. After a grammar
is closed, it cannot be modified.
</para>
</callout>
<callout arearefs="ex_hyg">
<para><link xlink:href="/apidoc/org/nineml/coffeegrinder/parser/HygieneReport.html">Hygiene</link>
problems with a closed grammar will generate warning messages through the
<link xlink:href="/apidoc/org/nineml/logging/package-summary.html">logging framework</link>.
Hygiene problems include undefined or unused symbols as well as unproductive symbols
and rules.
</para>
</callout>
<callout arearefs="ex_parser">
<para>Create a
<link xlink:href="/apidoc/org/nineml/coffeegrinder/parser/EarleyParser.html">parser</link>.
</para>
</callout>
<callout arearefs="ex_result">
<para>Parse some input.
</para>
</callout>
<callout arearefs="ex_success">
<para>Examine the
<link xlink:href="/apidoc/org/nineml/coffeegrinder/parser/EarleyResult.html">results</link>.
</para>
</callout>
<callout arearefs="ex_forest">
<para>Obtain the
<link xlink:href="/apidoc/org/nineml/coffeegrinder/parser/ParseForest.html">forest</link>.
</para>
</callout>
<callout arearefs="ex_tree">
<para>Get the (first)
<link xlink:href="/apidoc/org/nineml/coffeegrinder/parser/ParseTree.html">parse tree</link>.
</para>
</callout>
<callout arearefs="ex_amb">
<para>If the parse was ambiguous, you can get additional parse trees.
</para>
</callout>
</calloutlist>
</programlistingco>
</chapter>

<appendix xml:id="earley_parser">
<title>Earley Parser</title>
<para>This is the Earley parsing algorithm described in
<citetitle>SPPF-Style Parsing from Earley Recognisers</citetitle>
by <personname>Elizabeth Scott</personname>. This algorithm forms the basis
of the parser in <application>CoffeeGrinder</application>.</para>

<para>The input is a grammar Γ = (N, T, S, P) and a string a₁a₂…aₙ</para>
<programlisting>EARLEYPARSER {
  E₀,…,Eₙ, R, Q′, V=∅

  for all (S ::= α) ∈ P {
    if α ∈ Σ<subscript>N</subscript> add (S ::= ·α,0, null) to E₀
    if α = a₁α′ add (S ::= ·α,0, null) to Q′
  }

  for 0 ≤ i ≤ n {
    H=∅, R=Eᵢ, Q=Q′
    Q′=∅

    while R ≠ ∅ {
      remove an element, Λ say, from R
      if Λ = (B ::= α·Cβ, h, w) {
        for all (C ::= δ) ∈ P {
          if δ ∈ Σ<subscript>N</subscript> and (C ::= ·δ, i, null) ∉ Eᵢ {
            add (C ::= ·δ, i, null) to Eᵢ and R
          }
          if δ = aᵢ₊₁δ′ {
            add (C ::= ·δ, i, null) to Q
          }
        }
        if ((C, v) ∈ H) {
          let y = MAKE_NODE(B ::= αC·β, h, i, w, v, V)
          if β ∈ Σ<subscript>N</subscript> and (B ::= αC·β, h, y) ∉ Eᵢ {
            add (B ::= αC·β, h, y) to Eᵢ and R
          }
          if β = aᵢ₊₁β′ {
            add (B ::= αC·β, h, y) to Q
          }
        }
      }
  
      if Λ = (D ::= α·, h, w) {
        if w = null {
          if there is no node v ∈ V labelled (D, i, i) create one
          set w=v
          if w does not have family (ϵ) add one
        }
        if h = i {
          add (D, w) to H
        }
        for all (A ::= τ·Dδ, k, z) in Eₕ {
          let y = MAKE_NODE(A ::= τD·δ, k, i, z, w, V)
          if δ ∈ Σ<subscript>N</subscript> and (A ::= τD·δ, k, y) ∉ Eᵢ {
            add (A ::= τD·δ, k, y) to Eᵢ and R
          }
          if δ = aᵢ₊₁δ′ {
            add (A ::= τD·δ, k, y) to Q
          }
        }
      }
    }
  
    V=∅
    create an SPPF node v labelled (aᵢ₊₁, i, i+1)

    while Q ≠ ∅ {
      remove an element, Λ = (B ::= α·ai+1β, h, w) say, from Q
      let y = MAKE_NODE(B ::= αai+1·β, h, i+1, w, v, V)
      if β ∈ Σ<subscript>N</subscript> {
        add (B ::= αaᵢ₊₁·β, h, y) to Eᵢ₊₁
      }
      if β = aᵢ₊₂β′ {
        add (B ::= αaᵢ₊₁·β, h, y) to Q′
      }
    }
  }
  
  if (S ::= τ·, 0, w) ∈ Eₙ return w
  else return failure
}

MAKE_NODE(B ::= αx·β, j, i, w, v,V) {
  if β=ϵ {
    let s =B
  } else {
    let s = (B::=αx·β)
  }

  if α=ϵ and β≠ϵ {
    let y=v
  } else {
    if there is no node y ∈ V labelled (s, j, i) create one and add it to V
    if w=null and y does not have a family of children (v) add one
    if w≠null and y does not have a family of children (w, v) add one
  }
  return y
}</programlisting>
</appendix>

</book>
