<book xmlns="http://docbook.org/ns/docbook"
      xmlns:xi='http://www.w3.org/2001/XInclude'
      xmlns:xlink="http://www.w3.org/1999/xlink"
      version="5.2">
<info>
<mediaobject role="cover">
  <imageobject>
    <imagedata fileref="images/CoffeeGrinder.png"/>
  </imageobject>
</mediaobject>
<title>CoffeeGrinder</title>
<subtitle>Earley and Generalized LL parsers in Java</subtitle>
<author>
  <personname>Norm Tovey-Walsh</personname>
</author>
<copyright><year>2022</year><year>2023</year><holder>Norm Tovey-Walsh</holder></copyright>
<productname>coffeepot</productname>
<productnumber>@@VERSION@@</productnumber>
</info>

<preface>
<title>Introduction</title>

<para>This package provides an implementation of two different parsers:
an
<link xlink:href="https://en.wikipedia.org/wiki/Earley_parser">Earley parser</link>
and a
<link xlink:href="https://pure.royalholloway.ac.uk/portal/en/publications/gll-parsing(94ca4516-d72c-41ff-b11f-24b14ba15f2d).html"
>Generalized LL (GLL) parser</link>.
Both parsing algorithms are able to use grammars that are ambiguous. These APIs
parse a sequence of tokens and return a parse forest.
Individual parse trees can be obtained from the forest.</para>

<section>
<title>Why two parsers?</title>

<para>After implementing the Earley parser, I decided to implement the
GLL parser in the hopes that it would be substantially faster than the
Earley parser. After investing some effort optimizing the GLL
implementation it appears to be a faster than the Earley parser, but
not dramatically so. (Both parsers are “fast enough” for a lot of
projects, but if your goal is parsing megabytes of input, you may be
disappointed.)</para>

<para>Both parser implementations expose the same interface. The
Earley parser has one feature that the GLL parser does not: it is
possible to extract a “prefix parse” and restart parsing after the
prefix. Suppose for example, you have a grammar that recognizes
<code>a+</code>. If you give it the input “<literal>aaabbb</literal>,
you can extract the graph for the recognized prefix “aaa” even though
parse as a whole did not succeed. You can subsequently restart parsing
at “bbb” with the same or a different parser.</para>

<para>Conversely, the GLL parser represents derivations not with a
shared packed parse forest (SPPF) directly, but with binary subtree
sets (BSRs). It may be possible to improve the performance of the GLL
parser further by directly extracting trees from the BSRs rather than
converting it into an SPPF first. But my initial explorations of this
idea were unsuccessful. (There’s part of the paper that describes BSRs
that I don’t understand.)</para>
</section>
</preface>

<chapter>
<title>General use</title>

<para>This is just an overview, consult the 
<link xlink:href="/apidoc">JavaDoc</link> for more details.</para>

<programlistingco>
<areaspec>
<area xml:id="ex_opt" coords="1 65"/>
<area xml:id="ex_g" coords="2 65"/>
<area xml:id="ex_ntg" coords="4 65"/>
<area xml:id="ex_r1a" coords="10 35"/>
<area xml:id="ex_term" coords="12 65"/>
<area xml:id="ex_pgram" coords="18 65"/>
<area xml:id="ex_hyg" coords="20 65"/>
<area xml:id="ex_parser" coords="25 65"/>
<area xml:id="ex_result" coords="27 55"/>
<area xml:id="ex_success" coords="29 55"/>
<area xml:id="ex_forest" coords="31 55"/>
<area xml:id="ex_tree" coords="33 55"/>
<area xml:id="ex_amb" coords="37 55"/>
</areaspec>
<programlisting language="java"
><xi:include href="../../test/java/DocExample.java"
             fragid="text(line=15,60;md5=69fcab6c0d4062f4fe47dbb26f87e358)" parse="text"
/></programlisting>
<calloutlist>
<callout arearefs="ex_opt">
<para>Create the
<link xlink:href="/apidoc/org/nineml/coffeegrinder/parser/ParserOptions.html">ParserOptions</link>.
</para>
</callout>
<callout arearefs="ex_g">
<para>Create a
<link xlink:href="/apidoc/org/nineml/coffeegrinder/parser/SourceGrammar.html">SourceGrammar</link>.
</para>
</callout>
<callout arearefs="ex_ntg">
<para>Use the grammar to create nonterminal symbols.
</para>
</callout>
<callout arearefs="ex_r1a">
<para>Create rules mapping each nonterminal symbol to zero or more other symbols.
</para>
</callout>
<callout arearefs="ex_term">
<para>Several flavors of
<link xlink:href="/apidoc/org/nineml/coffeegrinder/parser/TerminalSymbol.html">TerminalSymbol</link>
are supported out-of-the-box and the set of
<link xlink:href="/apidoc/org/nineml/coffeegrinder/tokens/Token.html">Tokens</link>
is extensible.
</para>
</callout>
<callout arearefs="ex_pgram">
<para>Get a parser grammar from the (current state of) the source grammar.
</para>
</callout>
<callout arearefs="ex_hyg">
<para><link xlink:href="/apidoc/org/nineml/coffeegrinder/parser/HygieneReport.html">Hygiene</link>
problems with a parser grammar will generate warning messages through the
<link xlink:href="/apidoc/org/nineml/logging/package-summary.html">logging framework</link>.
Hygiene problems include undefined or unused symbols as well as unproductive symbols
and rules.
</para>
</callout>
<callout arearefs="ex_parser">
<para>Create a
<link xlink:href="/apidoc/org/nineml/coffeegrinder/parser/EarleyParser.html">parser</link>.
</para>
</callout>
<callout arearefs="ex_result">
<para>Parse some input.
</para>
</callout>
<callout arearefs="ex_success">
<para>Examine the
<link xlink:href="/apidoc/org/nineml/coffeegrinder/parser/EarleyResult.html">results</link>.
</para>
</callout>
<callout arearefs="ex_forest">
<para>Obtain the
<link xlink:href="/apidoc/org/nineml/coffeegrinder/parser/ParseForest.html">forest</link>.
</para>
</callout>
<callout arearefs="ex_tree">
<para>Get the (first)
<link xlink:href="/apidoc/org/nineml/coffeegrinder/parser/ParseTree.html">parse tree</link>.
</para>
</callout>
<callout arearefs="ex_amb">
<para>If the parse was ambiguous, you can get additional parse trees.
</para>
</callout>
</calloutlist>
</programlistingco>
</chapter>

<appendix xml:id="earley_parser">
<title>Earley Parser</title>
<para>This is the Earley parsing algorithm described in
<citetitle>SPPF-Style Parsing from Earley Recognisers</citetitle>
by <personname>Elizabeth Scott</personname>. This algorithm forms the basis
of the parser in <application>CoffeeGrinder</application>.</para>

<para>The input is a grammar Γ = (N, T, S, P) and a string a₁a₂…aₙ</para>
<programlisting>EARLEYPARSER {
  E₀,…,Eₙ, R, Q′, V=∅

  for all (S ::= α) ∈ P {
    if α ∈ Σ<subscript>N</subscript> add (S ::= ·α,0, null) to E₀
    if α = a₁α′ add (S ::= ·α,0, null) to Q′
  }

  for 0 ≤ i ≤ n {
    H=∅, R=Eᵢ, Q=Q′
    Q′=∅

    while R ≠ ∅ {
      remove an element, Λ say, from R
      if Λ = (B ::= α·Cβ, h, w) {
        for all (C ::= δ) ∈ P {
          if δ ∈ Σ<subscript>N</subscript> and (C ::= ·δ, i, null) ∉ Eᵢ {
            add (C ::= ·δ, i, null) to Eᵢ and R
          }
          if δ = aᵢ₊₁δ′ {
            add (C ::= ·δ, i, null) to Q
          }
        }
        if ((C, v) ∈ H) {
          let y = MAKE_NODE(B ::= αC·β, h, i, w, v, V)
          if β ∈ Σ<subscript>N</subscript> and (B ::= αC·β, h, y) ∉ Eᵢ {
            add (B ::= αC·β, h, y) to Eᵢ and R
          }
          if β = aᵢ₊₁β′ {
            add (B ::= αC·β, h, y) to Q
          }
        }
      }
  
      if Λ = (D ::= α·, h, w) {
        if w = null {
          if there is no node v ∈ V labelled (D, i, i) create one
          set w=v
          if w does not have family (ϵ) add one
        }
        if h = i {
          add (D, w) to H
        }
        for all (A ::= τ·Dδ, k, z) in Eₕ {
          let y = MAKE_NODE(A ::= τD·δ, k, i, z, w, V)
          if δ ∈ Σ<subscript>N</subscript> and (A ::= τD·δ, k, y) ∉ Eᵢ {
            add (A ::= τD·δ, k, y) to Eᵢ and R
          }
          if δ = aᵢ₊₁δ′ {
            add (A ::= τD·δ, k, y) to Q
          }
        }
      }
    }
  
    V=∅
    create an SPPF node v labelled (aᵢ₊₁, i, i+1)

    while Q ≠ ∅ {
      remove an element, Λ = (B ::= α·ai+1β, h, w) say, from Q
      let y = MAKE_NODE(B ::= αai+1·β, h, i+1, w, v, V)
      if β ∈ Σ<subscript>N</subscript> {
        add (B ::= αaᵢ₊₁·β, h, y) to Eᵢ₊₁
      }
      if β = aᵢ₊₂β′ {
        add (B ::= αaᵢ₊₁·β, h, y) to Q′
      }
    }
  }
  
  if (S ::= τ·, 0, w) ∈ Eₙ return w
  else return failure
}

MAKE_NODE(B ::= αx·β, j, i, w, v,V) {
  if β=ϵ {
    let s =B
  } else {
    let s = (B::=αx·β)
  }

  if α=ϵ and β≠ϵ {
    let y=v
  } else {
    if there is no node y ∈ V labelled (s, j, i) create one and add it to V
    if w=null and y does not have a family of children (v) add one
    if w≠null and y does not have a family of children (w, v) add one
  }
  return y
}</programlisting>
</appendix>

<appendix xml:id="gll_parser">
<title>GLL Parser</title>
<para>The GLL implementation in <application>CoffeeGrinder</application>
is based on the work described in
<citetitle xlink:href="https://pure.royalholloway.ac.uk/portal/en/publications/derivation-representation-using-binary-subtree-sets(d718368b-d4a4-49c8-b023-bdaae5feaece).html">Derivation representation using binary subtree sets</citetitle>
by <personname>Elizabeth Scott</personname>, <personname>Adrian Johnstone</personname>,
and <personname>L. Thomas van Binsbergen</personname>.</para>
</appendix>

<xi:include href="changelog.xml"/>
</book>
