buildscript {
  repositories {
    mavenLocal()
    mavenCentral()
    maven { url "https://dev.saxonica.com/maven" }
  }

  configurations.all {
    resolutionStrategy {
      force 'xml-apis:xml-apis:1.4.01',
        "${saxonGroup}:${saxonEdition}:${saxonVersion}",
        "org.xmlresolver:xmlresolver:${xmlresolverVersion}"
    }
  }

  dependencies {
    classpath group: saxonGroup, name: saxonEdition, version: saxonVersion
    classpath group: 'org.docbook', name: 'schemas-docbook', version: docbookVersion
    classpath group: 'org.docbook', name: 'docbook-xslTNG', version: xslTNGversion
  }
}

plugins {
  id "java"
  id "maven-publish"
  id "signing"
  id 'com.github.gmazzo.buildconfig' version "3.1.0"
  id 'com.nwalsh.gradle.saxon.saxon-gradle' version '0.10.5'
  id 'com.nwalsh.gradle.relaxng.validate' version '0.10.3'
  id 'com.nwalsh.gradle.docker.container' version '0.0.5'
}

import com.nwalsh.gradle.saxon.SaxonXsltTask
import com.nwalsh.gradle.relaxng.validate.RelaxNGValidateTask
import com.nwalsh.gradle.docker.DockerContainer
import java.nio.file.Paths
import java.nio.file.Files

sourceCompatibility = "1.8"
targetCompatibility = "1.8"

repositories {
  mavenLocal()
  mavenCentral()
}

configurations.all {
  resolutionStrategy {
    force 'xml-apis:xml-apis:1.4.01',
      "${saxonGroup}:${saxonEdition}:${saxonVersion}",
      "org.xmlresolver:xmlresolver:${xmlresolverVersion}"
  }
}

configurations {
  transform.extendsFrom documentation
}

dependencies {
  compileOnly (
    [group: 'org.slf4j', name: 'slf4j-api', version: '1.7.30' ],
    fileTree(dir: "${projectDir}/lib", include: '*.jar')
  )

  testImplementation (
    [group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: '5.9.2'],
    [group: 'org.junit.jupiter', name: 'junit-jupiter-params', version: '5.9.2'],
    [group: 'org.junit.platform', name: 'junit-platform-console-standalone', version: '1.7.1'],
    [group: 'org.slf4j', name: 'slf4j-simple', version: '1.7.30' ]
  )

  testRuntimeOnly (
    [group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: '5.9.2'],
    [group: 'org.junit.jupiter', name: 'junit-jupiter-params', version: '5.9.2'],
    [group: 'org.junit.platform', name: 'junit-platform-runner', version: '1.8.2'],
    fileTree(dir: "${projectDir}/lib", include: '*.jar')
  )

  documentation (
    [group: saxonGroup, name: saxonEdition, version: saxonVersion],
    [group: 'org.docbook', name: 'schemas-docbook', version: docbookVersion],
    [group: 'org.docbook', name: 'docbook-xslTNG', version: xslTNGversion]
  )
}

test {
  useJUnitPlatform()
}

println("Building with Java version ${System.getProperty('java.version')}")

buildConfig {
  packageName("org.nineml.${cgName}")
  buildConfigField('String', 'TITLE', "\"${cgTitle}\"")
  buildConfigField('String', 'VERSION', "\"${cgVersion}\"")
}

ext {
  c_coffeegrinder = "coffeegrinder"
}

docker_container.configure {
  workingDir = "docker"
}

// ============================================================

jar {
  archiveBaseName = "${cgTitle}-${cgVersion}"
  manifest {
    attributes 'Built-By': 'Norman Walsh'
    attributes 'Implementation-Vendor': 'Norman Walsh'
    attributes 'Implementation-Title': cgTitle
    attributes 'Implementation-Version': cgVersion
  }
}

javadoc {
  exclude "org/nineml/coffeegrinder/BuildConfig.java"
  title "${cgTitle}, an Earley parser in Java"
  options.overview = "src/main/java/org/nineml/coffeegrinder/overview.html"
  options.memberLevel = JavadocMemberLevel.PUBLIC
}

task dist(dependsOn:["test", "jar", "javadoc"]) {
  doLast {
    mkdir "${buildDir}/stage"
    mkdir "${buildDir}/stage/docs"
  }
  doLast {
    copy {
      from "${buildDir}/libs"
      into "${buildDir}/stage"
    }
  }
  doLast {
    copy {
      from "${buildDir}/docs"
      into "${buildDir}/stage/docs"
    }
  }
  doLast {
    copy {
      from "${projectDir}/docs"
      into "${buildDir}/stage/docs/examples"
    }
  }
  doLast {
    copy {
      from "${projectDir}/README.md"
      into "${buildDir}/stage/docs"
      filter { String line ->
        line.replace("[docs](docs)", "[examples](examples)")
      }
    }
  }
}

task zipDist(type: Zip) {
  from "${buildDir}/stage"
  into "${cgName}-${cgVersion}"
  archiveFileName = "${cgName}-${cgVersion}.zip"
}
dist.finalizedBy zipDist

task javadocJar(type: Jar, dependsOn: javadoc) {
  archiveClassifier = 'javadoc'
  from javadoc.destinationDir
}

task sourcesJar(type: Jar, dependsOn: ['generateBuildConfig']) {
  archiveClassifier = 'sources'
  from sourceSets.main.allSource
}

tasks.withType(JavaCompile) {
  options.compilerArgs << '-Xlint:deprecation'
  options.compilerArgs << '-Xlint:unchecked'
}

// ============================================================

task manual_xinclude(type: SaxonXsltTask, dependsOn: ["copyResources"]) {
  inputs.files fileTree(dir: "${projectDir}/src/website/xml")
  inputs.file "${projectDir}/website/xinclude.xsl"
  inputs.file "${projectDir}/src/test/java/DocExample.java"

  input "${projectDir}/src/website/xml/coffeegrinder.xml"
  stylesheet "${projectDir}/website/xinclude.xsl"
  output "${buildDir}/tmp/coffeegrinder.xml"
  args(['-init:org.docbook.xsltng.extensions.Register'])
}

task manual_validate(type: RelaxNGValidateTask, dependsOn: ["manual_xinclude"]) {
  input manual_xinclude.outputs.files.singleFile
  output "${buildDir}/xml/coffeegrinder.xml"
  schema "${projectDir}/website/docbook.rnc"
  compact true
}

task manual_augment(type: SaxonXsltTask, dependsOn: ["manual_validate"]) {
  input manual_validate.outputs.files.singleFile
  output "${buildDir}/aug/coffeegrinder.xml"
  stylesheet "${projectDir}/tools/augment.xsl"
  parameters (
    'version': cgVersion
  )
}

task website(type: SaxonXsltTask, dependsOn: ["manual_augment", "classlist"]) {
  inputs.file "${projectDir}/tools/docbook.xsl"
  inputs.file "${projectDir}/website/docbook.xsl"
  outputs.files fileTree(dir: "${buildDir}/website")

  input manual_augment.outputs.files.singleFile
  output "${buildDir}/website/index.html"
  stylesheet "${projectDir}/tools/docbook.xsl"
  args(['-init:org.docbook.xsltng.extensions.Register'])
  parameters (
    'mediaobject-input-base-uri': "file:${buildDir}/aug/",
    'mediaobject-output-base-uri': "/",
    'chunk': 'index.html',
    'chunk-output-base-uri': "${projectDir}/build/website/"
  )
}

task classlist(
  dependsOn: ["javadoc"]
) {
  inputs.files fileTree(dir: javadoc.destinationDir)
  outputs.file "${buildDir}/classlist.xml"

  def classlist = []
  doLast {
    def out = new PrintStream(new File("${buildDir}/classlist.xml"))
    out.println("<classlist>")
    def plen = "${javadoc.destinationDir}".length() + 1
    def stream = Files.walk(Paths.get("${javadoc.destinationDir}"))
    stream.filter(Files::isRegularFile).forEach(fn -> classlist.add(fn.toString()))
    classlist.forEach { fn ->
      def path = fn.substring(plen)
      if (path.endsWith(".html") && path.startsWith("org/")
          && !path.endsWith("/package-summary.html")
          && !path.endsWith("/package-tree.html")) {
        String className = path.replace("/", ".").replace(".html", "")
        String baseName = className
        int pos = className.lastIndexOf(".")+1
        baseName = className.substring(pos)
        out.println("<class name='${baseName}' fq='${className}' path='${path}'/>")
      }
    }
    out.println("</classlist>")
    out.close()
  }
}

task website_javadoc(type: Copy, dependsOn: ["javadoc"]) {
  from javadoc.destinationDir
  into "${buildDir}/website/apidoc"
}
website.finalizedBy website_javadoc

task copyResources(dependsOn: ["copyJarResources", "copyStaticResources"]) {
  // nop
}

task copyJarResources() {
  outputs.files fileTree(dir: "${buildDir}/website")

  def dbjar = null
  configurations.transform.each { path ->
    if (path.toString().contains("docbook-xslTNG")) {
      dbjar = path
    }
  }

  doLast {
    if (dbjar == null) {
      throw new GradleException("Failed to locate DocBook xslTNG jar file")
    }
    copy {
      into "${buildDir}/website"
      from ({ zipTree(dbjar.toString()) }) {
        include "org/docbook/xsltng/resources/**"
      }
      eachFile { fileCopyDetails ->
        def originalPath = fileCopyDetails.path
        fileCopyDetails.path = originalPath.replace('org/docbook/xsltng/resources/', '')
      }
    }
  }

  doLast {
    delete "${buildDir}/website/org"
  }
}

task copyStaticResources() {
  inputs.files fileTree(dir: "${projectDir}/src/website/resources")
  inputs.files fileTree(dir: "${projectDir}/website/resources")
  inputs.files fileTree(dir: "${projectDir}/src/website/xml")
  outputs.files fileTree(dir: "${buildDir}/website")
  outputs.files fileTree(dir: "${buildDir}/aug")

  doLast {
    copy {
      into "${buildDir}/website"
      from "${projectDir}/src/website/resources"
    }
  }

  doLast {
    copy {
      into "${buildDir}/website"
      from "${projectDir}/website/resources"
    }
  }

  doLast {
    copy {
      from "${projectDir}/src/website/xml/images"
      into "${buildDir}/website/images"
    }
  }

  // FIXME: Grotesque hack. 
  doLast {
    copy {
      from "${projectDir}/src/website/xml/images"
      into "${buildDir}/aug/images"
    }
  }

  // FIXME: Grotesque hack. 
  doLast {
    copy {
      from "${projectDir}/src/website/resources/images"
      into "${buildDir}/aug/images"
    }
  }

  doLast {
    copy {
      from "${projectDir}/src/website/xml/examples"
      into "${buildDir}/website/examples"
    }
  }
}

// ============================================================

signing {
  sign publishing.publications
}

publishing {
  publications {
    mavenJava(MavenPublication) {
      pom {
        name = cgTitle
        packaging = 'jar'
        description = 'An Earley parser with shared packed parse forests'
        url = 'https://github.com/nineml/coffeegrinder'

        scm {
          url = 'scm:git@github.com:nineml/coffeegrinder.git'
          connection = 'scm:git@github.com:nineml/coffeegrinder.git'
          developerConnection = 'scm:git@github.com:nineml/coffeegrinder.git'
        }

        licenses {
          license {
            name = 'Mozilla Public License Version 2.0'
            url = 'http://www.mozilla.org/MPL/2.0/'
            distribution = 'repo'
          }
        }

        developers {
          developer {
            id = 'ndw'
            name = 'Norman Walsh'
          }
        }
      }

      groupId = "org.nineml"
      artifactId = cgName
      version = cgVersion
      from components.java
      artifact javadocJar
      artifact sourcesJar
    }
  }

  repositories {
    maven {
      url = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
      credentials {
        username = project.findProperty("sonatypeUsername") ?: "NOUSER"
        password = project.findProperty("sonatypePassword") ?: "NOPASS"
      }
    }
  }
}

// ======================================================================

task dockerup() {
  doLast {
    if (!DockerContainer.running(c_coffeegrinder)) {
      DockerContainer.compose {
        command = "up"
        options = ["-p", "coffeegrinder"]
        args = ["-d"]
      }
    }
  }
}

task dockerdown() {
  doLast {
    if (DockerContainer.running(c_coffeegrinder)) {
      DockerContainer.compose {
        command = "down"
        options = ["-p", "coffeegrinder"]
      }
    }
  }
}

// ======================================================================

task helloWorld() {
  doLast {
    println('Hello, world.')
  }
}
